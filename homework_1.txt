0)
#centos_1 настроена в режиме сетевого моста для адаптера 1 (enp0s3) и внутренней сети для адаптера 2 (enp0s8).  Настройки адаптера в режиме сетевого моста позволяют без просброски портов подключиться к centos_1 по SSH
#centos_2 настроена в режме внутренней сети для адаптера 1 (enp0s3)
#по умолчанию внутренняя сеть не имеет настроек dhcp и dhcp-сервер нужно настраивать отдельно, но можно задать статический ip-адрес внутренней сети
#Можно задать статический адрес через утилиту ip. Настройку приходится выполнять под root, т.к. у пользователя user недостаточно прав для настройки:
#для centos_2: 
ip addr add 192.168.68.150/255.255.255.0 dev enp0s3
#для centos_1: 
ip addr add 192.168.68.149/255.255.255.0 dev enp0s8
#Данные настройки будут работать до первой перезагрузки машины
#Можно авторизоваться под user на обеих машинах и выполнить команды 
ping 192.168.68.149
ping 192.168.68.150
#Для подключение по SSH с учетной записью user на centos_1 нужно ввести:
ssh user@192.168.68.150

1)
#Используя команду ls, необходимо вывести на экран все файлы, которые расположены в секционных директориях /usr/share/man/manX и содержат слово "config" в имени.
#Судя по всему, имеется ввиду все файлы со словом config в папках с названием man*, поэтому команда будет:
ls man*/*config*

#Одним вызовом ls найти все файлы, содержащие слово "system" в каталогах /usr/share/man/man1 и /usr/share/man/man7"
ls man{1,7}/*system*

2)
#Найти в директории /usr/share/man все файлы, которые содержат слово "help" в имени
find . -name "*help*"

#найти там же все файлы, имя которых начинается на "conf"
find . -name "conf*"

#Какие действия мы можем выполнить с файлами, найденными командой find 
(не запуская других команд)? Приведите любой пример с комментарием.
#Действия (их на самом деле больше, но данные будут основными): 
-delete
	#Удаляет соответствующие результатам поиска файлы
-ls
	#Вывод более подробных результатов поиска
-print
	#Стоит по умолчанию, если не указать другое действие. Показывает полный путь к найденным файлам.
-exec
	#Выполняет указанную команду в каждой строке результатов поиска.
#Например может быть такая команда:
find . -empty -delete
#Данная команда удалит все пустые файлы. Но перед ее применением лучше себя подстраховать и ввести вместо -delete клманду -print, чтобы предварительно просто вывести найденные файлы на экран

3)
#При помощи команд head и tail, выведите последние 2 строки файла /etc/fstab и первые 7 строк файла /etc/yum.conf
tail -n 2 /etc/fstab
head -n 7 /etc/yum.conf

#Что произойдёт, если мы запросим больше строк, чем есть в файле? Попробуйте выполнить это на примере, используя команду wc (word cound) для подсчёта количества строк в файле.

wc /etc/fstab
#Файл содержит 11 строк. Если выполнить команду
head -n 15 /etc/fstab
#то команда выведет все те же 11 строк

4)
#Создайте в домашней директории файлы...
touch file_name{1..3}.md

#Используя {}, переименуйте...
#Команда mv не поддерживает переименование нескольких файлов, поэтому можно было бы переименовать их обычным способом по одному
mv file_name1.md file_name1.textdoc
mv file_name2.md file_name2
mv file_name3.md file_name3.md.latest
file_name1.textdoc file_name1.txt
#Но, судя по всему, по заданию требуется не переименовать несколько файлов, а сделать так:
mv file_name1.{md,textdoc}
mv file_name2.{md,}
mv file_name3.md{,.latest}
mv filename1.{textdoc,txt}

5)
#Перейдите в директорию /mnt. Напишите как можно больше различных вариантов команды cd, с помощью которых вы можете вернуться обратно в домашнюю директорию вашего пользователя.
cd /home/user #возвращаемся в домашнюю директорию относительно корня
cd ~ #кидает нас в домашнюю директорию
cd - #возвращает нас в предыдущий каталог, где мы были. До этого мы должны были быть в домашней директории
cd ../home/user #кидает нас в директорию выше текущей и перемещает в домашнюю директорию пользователя
cd #просто кидает нас в домашнюю директорию
cd ~user #кидает нас в домашнюю директорию конкретного пользователя

6)
#Создайте одной командой в домашней директории 3 папки new, in-process, processed. При этом in-process должна содержать в себе еще 3 папки tread0, tread1, tread2
mkdir -p new in-process/tread{0..2} processed
#Далее создайте 100 файлов формата data[[:digit:]][[:digit:]] в папке new
#Насколько понял по условиям, под data[[:digit:]][[:digit:]] имеются ввиду файлы с названием data и нумирацией от 00 до 99, т.к. [[:digit:]] - любой цифровой символ от 0 до 9. Тогда можно использовать команду
touch ./new/data{00..99}
#Скопируйте 34 файла в tread0 и по 33 в tread1 и tread2 соответственно.
cp ./new/data{00..33} ./in-process/tread0
cp ./new/data{34..66} ./in-process/tread1
cp ./new/data{67..99} ./in-process/tread2
#Выведете содержимое каталога in-process одной командой
ls ./in-process/*

#После этого переместите все файлы из каталогов tread в processed одной 
командой. Выведете содержимое каталога in-process и processed опять же 
одной командой
mv ./in-process/tread?/* ./processed/

#Сравните количество файлов в каталогах new и processed при помощи 
изученных ранее команд, если они равны удалите файлы из new
#**сравнение количества и удаление сделано при помощи условия
#данные операции обычным способом можно было бы выполнить командами:
ls ./new/ | wc -l
ls ./processed/ | wc -l
rm ./new/*
#команда ls ./new | wc -l выдаёт нам количество файлов (100), нужно заключить вывод данного выражения в условие.
#Оболочка имеет возможность заменить указанную команду результатом ее выполнения в любом месте командной строки. #Выполнить подстановку можно двумя способами: заключив команду в обратные кавычки или использовать конструкцию $(…)
#Сначала проверю правильно ли она отрабатывает вывод. Для этого я могу сделать then echo
if [[ $(ls ./new/ | wc -l) == 100 ]]; then echo "совпадает"; else echo "не совпадает"; fi
# и если прописать 99 вместо 100, то я смогу убедиться, что команда выводит все корректно, тогда и rm
if [[ $(ls ./new/ | wc -l) == #(ls ./processed/ | wc -l) ]]; then rm ./new/*; fi #данная команда должна сравнить вывод двух команд и удалить все файлы из папки

7)*
#Получить разворачивание фигурных скобок для выражения. Согласно стандартному поведению bash, стандартного для CentOS 7, скобки в приведённом ниже выражении развёрнуты не будут. Необходимо найти способ получить ожидаемый вывод.
#a=1; b=3
#echo file{$a..$b}
#Необходимо предоставить модицицированную команду, результатом которой является следующий вывод: 
#file1 file2 file3

#изначально данная команда выводить file{1..3}, и выглядит так, что она не завершает подстановку переменных. Путем долгого поиска информации и методом проб и ошибок удалось выяснить, что можно использовать следущую модификацию команды
eval echo{$a..$b)
#Она выводит необходимый результат
#man eval выводит следующее: The eval utility shall construct a command by concatenating arguments together, separating each with a <space> character. The constructed command shall be read and executed by the shell.
#В книге Linux и UNIX: программирование в shellю Руководство разработчика Тейнсли Дэвида есть следующяя информация:
#"Команда eval служит для оценки командной строки с целью завершения каких-либо подстановок интерпретатора shell с последующим их вызовом. Команда eval используется для расширения значений переменных (если в результате одного прохода расширения не происходит, выполняется второй проход). Переменные, для оценки которых требуется два прохода, иногда называют сложными переменными.", т.е., насколько я могу понять, команда eval завершает подстановку переменных


