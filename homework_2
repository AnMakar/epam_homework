#1. Открыть инструкцию по пользованию приложением awk. Найти секцию про использование переменных окружения. Сохранить эту секцию в отдельный файл.
#увы, не удалось найти хороший красивый способ это сделать. Есть мысли сделать это через awk или sed.

#2. Написать скрипт, который создаёт файл "task2.txt" директорией выше своего местоположения. В случае ошибки текст ошибки записывается в err.log а пользователю выдаётся сообщение "Error."
#создаю скрипт script1.sh
	#!/bin/bash
	touch ../task2.txt 2>>err.log || echo "Error"

#2*. Если файл уже существует, выдаётся одна ошибка, а если нет прав для его создания - другая.
# для чистоты эксперимента беру команду, которая точно покажет существует файл или нет, потому что touch этого не делает
errorMessage=$(mkdir ../testfolder 2>&1) \
|| if [[ $errorMessage == *"Permission"* ]]; then echo "Permission Error"; elif [[ $errorMessage == *"exists"* ]]; else echo "Another Error"; fi
# таким образом прописанная команда mkdir ../testfolder будет создавать директорию выше текущей, на что у нее нет прав, и будет выдавать сообщение №1, а если будет команда mkdir ./testfolder, и если папка уже создана, то будет выдавать сообщение №2

#3. Создать 2 файла: 1-й - текстовый с указанием абслютного пути до директории. 2-й - скрипт, который при выполнении выводит содержимое директории по указанному в первом файле.
#Можно отдельно создать пару файлов через touch и потом отредактировать его, но можно попробовать перенаправить вывод в сразу в файл в целях небольшой тренировки перенаправления
echo "/home/user/" > path.txt
echo "ls < path.txt" > script3.sh
#script3.sh считает данные из файла path.txt и покажет содержимое в указанной директории

3*. Скрипт выводит отдельно количество файлов и количество директорий.
#создаю файл script3_1.sh
	#!/bin/bash
	ls -l < path.txt | grep "^-" | wc -l
	ls -l < path.txt | grep "^d" | wc -l
#ls -l выводит расширеную информацию по содержимому директории, grep выводит по образцу ^- или ^d соответственно файл или папку, wc -l считает количество выведенных элементов

#3**. Скрипт принимает любое количество записей в первом файле и обрабатывает их последовательно.
#создаю файл path1.txt
cat path1.txt
/home/
/home/user/
/etc
#создаю скрипт script3_2.sh
	#!/bin/bash
	cat path1.txt | while read y
	do
        echo "Количество файлов в директории $y: "
        ls -l $y | grep "^-" | wc
        echo "Количество папок в директории $y: "
        ls -l $y | grep "^d" | wc
	done
